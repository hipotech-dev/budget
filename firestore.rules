rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }

    function isValidAmount(amount) {
      return amount is number && amount >= 0;
    }

    function isValidDate(date) {
      return date is timestamp;
    }

    function isValidString(field) {
      return field is string && field.size() > 0 && field.size() <= 500;
    }

    function isValidCategory(category) {
      let validCategories = ['housing', 'transportation', 'food', 'utilities', 'insurance', 
                           'healthcare', 'savings', 'debt', 'entertainment', 'shopping', 
                           'education', 'travel', 'other', 'income'];
      return category is string && category in validCategories;
    }

    // Rate limiting function - max 500 writes per user per 5 minutes
    function isNotRateLimited() {
      let writeCount = firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)/metadata/rateLimit).data.writeCount;
      let lastWrite = firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)/metadata/rateLimit).data.lastWrite;
      
      return writeCount < 500 || lastWrite < timestamp.date(date.now() - duration.value(5, 'm'));
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Branches rules (from user's structure)
    match /branches/{branchId} {
      allow read: if true;
      allow create: if request.auth != null; // Requires authentication
      allow update, delete: if request.auth != null;
    }

    // Transactions rules
    match /transactions/{transactionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow list, get: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Budgets rules
    match /budgets/{budget} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow list, get: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Goals rules
    match /goals/{goal} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow list, get: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Users profile rules
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if request.auth != null; // Allow authenticated users to query users collection
      
      // User subcollections
      match /{subcollection}/{document} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
    }

    // User metadata for rate limiting
    match /users/{userId}/metadata/rateLimit {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Notifications rules
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // Settings rules (admins only)
    match /settings/{settingId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Activity logs: allow any authenticated user to create, only admins can read
    match /activityLogs/{logId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && isAdmin();
      allow update, delete: if false;
    }

    // Reports rules
    match /reports/{reportId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Analytics data rules
    match /analytics/{analyticsId} {
      allow create: if request.auth != null && isAdmin();
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // User permissions and features
    match /userPermissions/{permissionId} {
      allow read, write: if request.auth != null && (request.auth.uid == permissionId || isAdmin());
    }

    // System logs and monitoring
    match /systemLogs/{logId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // Backup and restore data
    match /backups/{backupId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // User preferences and settings
    match /userPreferences/{preferenceId} {
      allow create: if request.auth != null && request.auth.uid == preferenceId;
      allow read, update, delete: if request.auth != null && (request.auth.uid == preferenceId || isAdmin());
    }

    // Categories and tags
    match /categories/{categoryId} {
      allow read: if true; // Public read access for categories
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    // Currency exchange rates (public read, admin write)
    match /exchangeRates/{rateId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    // App configuration and features
    match /appConfig/{configId} {
      allow read: if true; // Public read access for app config
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    // User sessions and tokens
    match /userSessions/{sessionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Audit trail for sensitive operations
    match /auditTrail/{auditId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // Default rule for any other collections
    match /{document=**} {
      allow read, write: if request.auth != null && isAdmin();
    }
  }
} 